//TELEOP MECANUM 
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp
public class MecanumTeleOp extends OpMode {
    private DcMotor frontLeftMotor;
    private DcMotor backLeftMotor;
    private DcMotor frontRightMotor;
    private DcMotor backRightMotor;
    private DcMotor liftMotor;
    
    @Override
    public void init() {
          // Declare our motors
        // Make sure your ID's match your configuration
         frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
         backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
         frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
         backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");
        liftMotor = hardwareMap.get(DcMotor.class, "liftMotor");

        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        frontRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
    }
    @Override
    public void loop()   {
      
 
    //   waitForStart();

       // if (isStopRequested()) return;
        

            double y = gamepad1.left_stick_y; // Remember, Y stick value is reversed
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rot = -gamepad1.right_stick_x * 1.15;

             // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio,
            // but only if at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rot), 1);
            double frontLeftPower = (y + x + rot) / denominator;
            double backLeftPower = (y - x + rot) / denominator;
            double frontRightPower = (y - x - rot) / denominator;
            double backRightPower = (y + x - rot) / denominator;

            frontLeftMotor.setPower(frontLeftPower / 1.5);
            backLeftMotor.setPower(backLeftPower / 1.5);
            frontRightMotor.setPower(frontRightPower / 1.5);
            backRightMotor.setPower(backRightPower / 1.5);
            if (gamepad1.dpad_up) {
             liftMotor.setPower(1);
            } else if (gamepad1.dpad_down) {
             liftMotor.setPower(-1);
            } else {
             liftMotor.setPower(0);
            }
    //liftMotor.setPower(gamepad2.left_stick_y/1.5);
            
            
    } 
}

// AUTO RED FAR 
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous

public class BlueFarAuto extends LinearOpMode{

    private DcMotor frontLeftMotor;
    private DcMotor backLeftMotor;
    private DcMotor frontRightMotor;
    private DcMotor backRightMotor;
    
    public void init_mine(){
          // Declare our motors
        // Make sure your ID's match your configuration
         frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
         backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
         frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
         backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");

        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        frontRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        
    }
    
    public void moveForward(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
        
    }
    
     public void moveBack(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(-0.5);
        
        wait(seconds);
        
    }
    
    public void turnLeft(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(-0.5);
        
        
        wait(seconds);
    }
    
    public void turnRight(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
    }
    
    public void strafe(double seconds,double power)
    {
        frontLeftMotor.setPower(power);
        frontRightMotor.setPower(-power);
        backRightMotor.setPower(power);
        backLeftMotor.setPower(-power);
        
        wait(seconds);
        
    }
    public void wait(double seconds)
    {
        resetRuntime();
    while (getRuntime()<seconds && opModeIsActive());
    }
    
    
    public void runOpMode() throws InterruptedException{
        init_mine();
        waitForStart();
        
        strafe(0.25,0.5);
        moveBack(7);
        
        
    }
    
}
// AUTO IN GENRAL ROBOT 

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous

public class AutoRobot extends LinearOpMode{

    private DcMotor frontLeftMotor;
    private DcMotor backLeftMotor;
    private DcMotor frontRightMotor;
    private DcMotor backRightMotor;
    
    public void init_mine(){
          // Declare our motors
        // Make sure your ID's match your configuration
         frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
         backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
         frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
         backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");

        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        frontRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        
    }
    
    public void moveForward(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
        
    }
    
     public void moveBack(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(-0.5);
        
        wait(seconds);
        
    }
    
    public void turnLeft(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(-0.5);
        
        
        wait(seconds);
    }
    
    public void turnRight(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
    }
    
    public void strafe(double seconds, double power){
        frontLeftMotor.setPower(power);
        frontRightMotor.setPower(-power);
        backRightMotor.setPower(power);
        backLeftMotor.setPower(-power);
        
        wait(seconds);
        
    }
    public void wait(double seconds)
    {
        resetRuntime();
    while (getRuntime()<seconds && opModeIsActive());
    }
    
     
    public void runOpMode() {
        init_mine();
        waitForStart();
        moveBack(3);
        
    }
    
}

// BLUE FAR AUTO 

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@Autonomous

public class BlueFarAuto extends LinearOpMode{

    private DcMotor frontLeftMotor;
    private DcMotor backLeftMotor;
    private DcMotor frontRightMotor;
    private DcMotor backRightMotor;
    
    public void init_mine(){
          // Declare our motors
        // Make sure your ID's match your configuration
         frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
         backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
         frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
         backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");

        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        frontRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        backRightMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        
    }
    
    public void moveForward(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
        
    }
    
     public void moveBack(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(-0.5);
        
        wait(seconds);
        
    }
    
    public void turnLeft(double seconds){
        frontLeftMotor.setPower(-0.5);
        frontRightMotor.setPower(0.5);
        backRightMotor.setPower(0.5);
        backLeftMotor.setPower(-0.5);
        
        
        wait(seconds);
    }
    
    public void turnRight(double seconds)
    {
        frontLeftMotor.setPower(0.5);
        frontRightMotor.setPower(-0.5);
        backRightMotor.setPower(-0.5);
        backLeftMotor.setPower(0.5);
        
        wait(seconds);
    }
    
    public void strafe(double seconds,double power)
    {
        frontLeftMotor.setPower(power);
        frontRightMotor.setPower(-power);
        backRightMotor.setPower(power);
        backLeftMotor.setPower(-power);
        
        wait(seconds);
        
    }
    public void wait(double seconds)
    {
        resetRuntime();
    while (getRuntime()<seconds && opModeIsActive());
    }
    
    
    public void runOpMode() throws InterruptedException{
        init_mine();
        waitForStart();
        
        strafe(0.25,0.5);
        moveBack(7);
        
        
    }
    
}
